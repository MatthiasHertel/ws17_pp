// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Job job
// swagger:model job
type Job struct {

	// Filters on job visibility related to whether it is archived
	ArchiveFilters []ArchiveFilters `json:"archiveFilters"`

	// File with case variables for DOE job
	CaseFile interface{} `json:"caseFile,omitempty"`

	// Number of runs for a DOE, will be 1 for basic jobs
	ExpectedRuns int64 `json:"expectedRuns,omitempty"`

	// Job identifier
	// Required: true
	// Read Only: true
	ID string `json:"id"`

	// Whether to include a nominal baseline run for a DOE job
	IncludeNominalRun bool `json:"includeNominalRun,omitempty"`

	// Is this a low priority job?
	IsLowPriority bool `json:"isLowPriority,omitempty"`

	// Run this job in “dry run” mode to check DOE templates
	IsTemplateDryRun bool `json:"isTemplateDryRun,omitempty"`

	// List of analyses for the job. Details below
	Jobanalyses []Jobanalyses `json:"jobanalyses"`

	// List of job variables for DOE job. Details below
	Jobvariables []Jobvariables `json:"jobvariables"`

	// Number of iterations for Monte Carlo optimization job
	MonteCarloIterations int64 `json:"monteCarloIterations,omitempty"`

	// Name of job
	// Required: true
	Name *string `json:"name"`

	// Job analysis representing optimizer used for optimization jobs
	Optimizer interface{} `json:"optimizer,omitempty"`

	// Email address of job owner
	Owner string `json:"owner,omitempty"`

	// CSV file with DOE parameters (DOE job only)
	ParamFile interface{} `json:"paramFile,omitempty"`

	// (deprecated) Configuration for companion remote visualization node
	RemoteVizConfig interface{} `json:"remoteVizConfig,omitempty"`

	// Filters on file resources
	ResourceFilters []ResourceFilters `json:"resourceFilters"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveFilters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJobanalyses(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJobvariables(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResourceFilters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateArchiveFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.ArchiveFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchiveFilters); i++ {

		if err := m.ArchiveFilters[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveFilters" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Job) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateJobanalyses(formats strfmt.Registry) error {

	if swag.IsZero(m.Jobanalyses) { // not required
		return nil
	}

	for i := 0; i < len(m.Jobanalyses); i++ {

	}

	return nil
}

func (m *Job) validateJobvariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Jobvariables) { // not required
		return nil
	}

	for i := 0; i < len(m.Jobvariables); i++ {

	}

	return nil
}

func (m *Job) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateResourceFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceFilters); i++ {

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
