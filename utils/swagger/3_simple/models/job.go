// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Job job
// swagger:model job
type Job struct {

	// Job Identifier
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Job Description
	// Required: true
	Name *string `json:"name"`

	// Job Quantifier
	Quantifier int64 `json:"quantifier,omitempty"`

	// Job Status
	Status string `json:"status,omitempty"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var jobTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Completed","Executing","Validated","Started","Queued","Pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobTypeStatusPropEnum = append(jobTypeStatusPropEnum, v)
	}
}

const (
	// JobStatusCompleted captures enum value "Completed"
	JobStatusCompleted string = "Completed"
	// JobStatusExecuting captures enum value "Executing"
	JobStatusExecuting string = "Executing"
	// JobStatusValidated captures enum value "Validated"
	JobStatusValidated string = "Validated"
	// JobStatusStarted captures enum value "Started"
	JobStatusStarted string = "Started"
	// JobStatusQueued captures enum value "Queued"
	JobStatusQueued string = "Queued"
	// JobStatusPending captures enum value "Pending"
	JobStatusPending string = "Pending"
)

// prop value enum
func (m *Job) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Job) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
