// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"sync"
	"sync/atomic"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	graceful "github.com/tylerb/graceful"

	"3_simple/models"
	"3_simple/restapi/operations"
	"3_simple/restapi/operations/jobs"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name JobSimple --spec ../swagger.yml

// var jobItems = make(map[int64]*models.Job)
var jobItems = make(map[int64]*models.Job)
var lastID int64

var jobItemsLock = &sync.Mutex{}

func newItemID() int64 {
	return atomic.AddInt64(&lastID, 1)
}

func NewJob(jobname string) *models.Job {
	v := jobname
	return &models.Job{Name: &v}
}

func getAllJobItems(page int64, page_size int64) (jobs []*models.Job) {
	jobs = make([]*models.Job, 0)
	// jobs = append(jobs, NewJob("test"))
	fmt.Print(len(jobItems))
	for id, item := range jobItems {
		if len(jobs) >= int(page_size) {
			return
		}
		if page == 0 || id > page {
			jobs = append(jobs, item)
		}
	}
	return
}

func addJobItem(item *models.Job) error {
	if item == nil {
		return errors.New(500, "item must be present")
	}

	jobItemsLock.Lock()
	defer jobItemsLock.Unlock()

	newID := newItemID()
	item.ID = newID
	jobItems[newID] = item

	return nil
}

func deleteJobItem(id int64) error {
	jobItemsLock.Lock()
	defer jobItemsLock.Unlock()

	_, exists := jobItems[id]
	if !exists {
		return errors.NotFound("not found: item %d", id)
	}

	delete(jobItems, id)
	return nil
}

func updateJobItem(id int64, item *models.Job) error {
	if item == nil {
		return errors.New(500, "item must be present")
	}

	jobItemsLock.Lock()
	defer jobItemsLock.Unlock()

	_, exists := jobItems[id]
	if !exists {
		return errors.NotFound("not found: item %d", id)
	}

	item.ID = id
	jobItems[id] = item
	return nil
}

func getJobItem(id int64, item *models.Job) (job *models.Job) {
	jobItemsLock.Lock()
	defer jobItemsLock.Unlock()

	_, exists := jobItems[id]
	if !exists {
		return nil
	}

	job = jobItems[id]
	return
}

func configureFlags(api *operations.JobSimpleAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.JobSimpleAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.JobsAddOneHandler = jobs.AddOneHandlerFunc(func(params jobs.AddOneParams) middleware.Responder {
		if err := addJobItem(params.Body); err != nil {
			return jobs.NewAddOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return jobs.NewAddOneCreated().WithPayload(params.Body)
	})
	api.JobsFindJobsHandler = jobs.FindJobsHandlerFunc(func(params jobs.FindJobsParams) middleware.Responder {
		mergedParams := jobs.NewFindJobsParams()
		mergedParams.Page = swag.Int64(0)
		if params.Page != nil {
			mergedParams.Page = params.Page
		}
		if params.Pagesize != nil {
			mergedParams.Pagesize = params.Pagesize
		}
		return jobs.NewFindJobsOK().WithPayload(getAllJobItems(*mergedParams.Page, *mergedParams.Pagesize))

	})

	api.JobsDestroyOneHandler = jobs.DestroyOneHandlerFunc(func(params jobs.DestroyOneParams) middleware.Responder {
		if err := deleteJobItem(params.ID); err != nil {
			return jobs.NewDestroyOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return jobs.NewDestroyOneNoContent()
	})

	api.JobsUpdateOneHandler = jobs.UpdateOneHandlerFunc(func(params jobs.UpdateOneParams) middleware.Responder {
		if err := updateJobItem(params.ID, params.Body); err != nil {
			return jobs.NewUpdateOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return jobs.NewUpdateOneOK().WithPayload(params.Body)
	})

	api.JobsGetOneHandler = jobs.GetOneHandlerFunc(func(params jobs.GetOneParams) middleware.Responder {
		if getJobItem(params.ID, params.Body) == nil {
			return jobs.NewUpdateOneDefault(404).WithPayload(&models.Error{Code: 404, Message: swag.String("Not Found")})
		}
		return jobs.NewGetOneOK().WithPayload(getJobItem(params.ID, params.Body))
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
